name: Rebuild DeepForge PyTorch Docker image in ACR
on:
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}

jobs:
  check-code-change:
    runs-on: ubuntu-latest
    outputs:
      project_requirements: ${{ steps.code_check.outputs.project_requirements }}
      image_files_context_hash: ${{ steps.compute_image_context_sha_tag.outputs.image_files_context_hash }}
    steps:
      - name: Checkout DeepForge repo
        uses: actions/checkout@v4
      - name: Check code change
        id: code_check
        uses: dorny/paths-filter@v3
        with:
          filters: |
            project_requirements:
              - 'Dockerfile.pytorch'
              - 'pyproject.toml'
              - 'uv.lock'
      - name: Compute new Docker image tag from files context
        id: compute_image_context_sha_tag
        run: |
          source .github/workflows/scripts/get_files_context_hash.sh && 
          HASH=$(get_files_context_hash "Dockerfile.pytorch pyproject.toml uv.lock") &&
          echo "image_files_context_hash=$HASH" >> $GITHUB_OUTPUT
  build-image:
    needs: check-code-change
    if: ${{ needs.check-code-change.outputs.project_requirements == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout DeepForge repo
        uses: actions/checkout@v4
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          tenant-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          subscription-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      - name: Check if repository exists in ACR
        id: check_if_repository_exists_in_acr
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az acr repository list --name ${{ vars.ACR_REGISTRY }} --output tsv | grep -Fxq ${{ vars.ACR_DEEPFORGE_PT_REPOSITORY }} && \
            REPOSITORY_EXISTS="true" || REPOSITORY_EXISTS="false"
            echo "repository_exists=$REPOSITORY_EXISTS" >> $GITHUB_OUTPUT
      - name: Check if Docker image is already built in ACR by SHA image tag
        id: check_if_image_exists_in_acr
        if: ${{ steps.check_if_repository_exists_in_acr.outputs.repository_exists == 'true' }}
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            TAG=$(
              az acr repository show-tags \
                --name ${{ vars.ACR_REGISTRY }} \
                --repository ${{ vars.ACR_DEEPFORGE_PT_REPOSITORY }} \
                --query "[?@=='${{ needs.check-code-change.outputs.image_files_context_hash }}']" \
                --output tsv
            )
            if [ -n "$TAG" ]; then
              TAG_EXISTS="true"
            else
              TAG_EXISTS="false"
            fi
            echo "tag_exists=$TAG_EXISTS" >> $GITHUB_OUTPUT
      - name: Get latest Docker image digest
        id: get_latest_docker_image_digest
        if: ${{ steps.check_if_repository_exists_in_acr.outputs.repository_exists == 'true' }}
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            read DIGEST SHA <<< "$(az acr manifest list-metadata --output tsv \
              --query "[?tags != null && contains(tags, 'latest')].[digest, tags[?@ != 'latest'] | [0]]" \
              --registry ${{ vars.ACR_REGISTRY }} \
              --name ${{ vars.ACR_DEEPFORGE_PT_REPOSITORY }})"
            echo "latest_image_digest=$DIGEST" >> $GITHUB_OUTPUT
            echo "latest_image_sha=$SHA" >> $GITHUB_OUTPUT
      - name: Rebuild Docker image
        if: ${{ steps.check_if_image_exists_in_acr.outputs.tag_exists == 'false' || 
          steps.check_if_repository_exists_in_acr.outputs.repository_exists == 'false'
          }}
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az acr build --registry ${{ vars.ACR_REGISTRY }} \
            --image ${{ vars.ACR_DEEPFORGE_PT_REPOSITORY }}:${{ needs.check-code-change.outputs.image_files_context_hash }} \
            --image ${{ vars.ACR_DEEPFORGE_PT_REPOSITORY }}:latest --file Dockerfile.pytorch .
      - name: Delete depricated latest Docker image
        if: ${{ 
          steps.check_if_repository_exists_in_acr.outputs.repository_exists == 'true' &&
          needs.check-code-change.outputs.image_files_context_hash != steps.get_latest_docker_image_digest.outputs.latest_image_sha
          }}
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az acr repository delete --name ${{ vars.ACR_REGISTRY }} \
            --image ${{ vars.ACR_DEEPFORGE_PT_REPOSITORY }}@\${{ steps.get_latest_docker_image_digest.outputs.latest_image_digest }} --yes
      
  skip-workflow:
    needs: check-code-change
    if: ${{ needs.check-code-change.outputs.project_requirements == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Skipping Action
        run: echo "Action is skipped"